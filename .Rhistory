p2_m800 <- ggplot(regression.points.m800, aes(x = Time_hat, y = residual)) +
geom_point() +
labs(x = "Fitted values", y = "Residual", title = "Residuals vs Fitted values") +
geom_hline(yintercept = 0, col = 4, size = 1)
grid.arrange(p1_m800, p2_m800, ncol = 2)
#plot residuals against previous residuals
p3_m800 <- ggplot(regression.points.m800, aes(x = c(residual[2:24],NA),y = residual))+
geom_point()+
labs(y = "Residuals", x = "Residuals lag 1", title = "Residual Independance")+
geom_hline(yintercept = 0, col = 4, size = 1)
grid.arrange(p1_m800,p3_m800, ncol = 2)
#Plot residuals against fitted values and Normal QQ plot
modelplot_m800 <- autoplot(model_l_m800, which = 1:2)
modelplot_m800
his1_m800 <- ggplot(regression.points.m800, aes(x = residual)) +
geom_histogram(colour = "black", fill="#004c6d", bins = 5) +
labs(x = "Residual", title = "Histogram of residuals")
his1_m800
#Shapiro-Wilk’s method for normality test
shapiro.test(regression.points.m800$residual)#p_value > 0.05 >we can assume normality
durbinWatsonTest(model_l_m800)#p_value<0.05 ->residuals are auto correlated
### Outlier due to altitude of location - Mexico city ####
d_men800 <- cooks.distance(model_l_m800)
r_men800 <- stdres(model_l_m800)
ndata_men800 <- cbind(men800, d_men800, r_men800)
ndata_men400[d_men800 > 4/24, ]
# which does not contain the observation corresponding to
#the venue Mexico city. Hence the model is not affected
#by the affected performance of athletes due to high altitude.
###model fitting for  1500 metres men
m1500_Date <- as.POSIXct(men1500$Date, format="%d / %m / %Y")
cor(as.numeric(m1500_Date),men1500$Time)
model_l_m1500 <- lm(Time ~ Date, data = men1500)
summary(model_l_m1500)
anova(model_l_m1500)
regression.points.m1500 <- get_regression_points(model_l_m1500)
#Plot of residuals vs explanatory variable
p1_m1500 <- ggplot(regression.points.m1500, aes(x = Date, y = residual)) +
geom_point() +
labs(x = "Date", y = "Residual", title = "Residuals vs Date") +
geom_hline(yintercept = 0, col = 4, size = 1)
p2_m1500 <- ggplot(regression.points.m1500, aes(x = Time_hat, y = residual)) +
geom_point() +
labs(x = "Fitted values", y = "Residual", title = "Residuals vs Fitted values") +
geom_hline(yintercept = 0, col = 4, size = 1)
grid.arrange(p1_m1500, p2_m1500, ncol = 2)
#plot residuals against previous residuals
p3_m1500 <- ggplot(regression.points.m1500, aes(x = c(residual[2:38],NA),y = residual))+
geom_point()+
labs(y = "Residuals", x = "Residuals lag 1", title = "Residual Independance")+
geom_hline(yintercept = 0, col = 4, size = 1)
grid.arrange(p1_m1500,p3_m1500, ncol = 2)
#Plot residuals against fitted values and Normal QQ plot
modelplot_m1500 <- autoplot(model_l_m1500, which = 1:2)
modelplot_m1500
his1_m1500 <- ggplot(regression.points.m1500, aes(x = residual)) +
geom_histogram(colour = "black", fill="#004c6d", bins = 5) +
labs(x = "Residual", title = "Histogram of residuals")
his1_m1500
#Shapiro-Wilk’s method for normality test
shapiro.test(regression.points.m1500$residual) #p_value > 0.05 >we can assume normality
durbinWatsonTest(model_l_m1500) #p_value<0.05 ->residuals are auto correlated
grid.arrange(modelplot_m400@plots[[1]], modelplot_m800@plots[[1]], modelplot_m1500@plots[[1]])
### model fitting for  400 metres women
w400_Date <- as.POSIXct(women400$Date, format="%d / %m / %Y")
cor(as.numeric(w400_Date),women400$Time)
model_l_w400 <- lm(Time ~ Date, data = women400)
summary(model_l_w400)
anova(model_l_w400)
regression.points.w400 <- get_regression_points(model_l_w400)
#Plot of residuals vs explanatory variable
p1_w400 <- ggplot(regression.points.w400, aes(x = Date, y = residual)) +
geom_point() +
labs(x = "Date", y = "Residual", title = "Residuals vs Date") +
geom_hline(yintercept = 0, col = 4, size = 1)
p2_w400 <- ggplot(regression.points.w400, aes(x = Time_hat, y = residual)) +
geom_point() +
labs(x = "Fitted values", y = "Residual", title = "Residuals vs Fitted values") +
geom_hline(yintercept = 0, col = 4, size = 1)
grid.arrange(p1_w400, p2_w400, ncol = 2)
#plot residuals against previous residuals
p3_w400 <- ggplot(regression.points.w400, aes(x = c(regression.points.w400$residual[2:24],NA),y = residual))+
geom_point()+
labs(y = "Residuals", x = "Residuals lag 1", title = "Residual Independance")+
geom_hline(yintercept = 0, col = 4, size = 1)
#Plot residuals against fitted values and Normal QQ plot
modelplot_w400 <- autoplot(model_l_w400, which = 1:2)
modelplot_w400
his1_w400 <- ggplot(regression.points.w400, aes(x = residual)) +
geom_histogram(colour = "black", fill="#004c6d", bins = 5) +
labs(x = "Residual", title = "Histogram of residuals")
his1_w400
#Shapiro-Wilk’s method for normality test
shapiro.test(regression.points.w400$residual) #p_value > 0.05 >we can assume normality
durbinWatsonTest(model_l_w400) #p_value<0.05 ->residuals are auto correlated
### Outlier due to altitude of location - Mexico city ####
d_women400 <- cooks.distance(model_l_w400)
r_women400 <- stdres(model_l_w400)
ndata_women400 <- cbind(women400, d_women400, r_women400)
ndata_women400[d_women400 > 4/28, ]
# which does not contain the observation corresponding to
#the venue Mexico city. Hence the model is not affected by
#the affected performance of athletes due to high altitude.
####### model fitting for  800 metres women ######
w800_Date <- as.POSIXct(women800$Date, format="%d / %m / %Y")
cor(as.numeric(w800_Date),women800$Time)
model_l_w800 <- lm(Time ~ Date, data = women800)
summary(model_l_w800)
anova(model_l_w800)
regression.points.w800 <- get_regression_points(model_l_w800)
#Plot of residuals vs explanatory variable
p1_w800 <- ggplot(regression.points.w800, aes(x = Date, y = residual)) +
geom_point() +
labs(x = "Date", y = "Residual", title = "Residuals vs Date") +
geom_hline(yintercept = 0, col = 4, size = 1)
p2_w800 <- ggplot(regression.points.w800, aes(x = Time_hat, y = residual)) +
geom_point() +
labs(x = "Fitted values", y = "Residual", title = "Residuals vs Fitted values") +
geom_hline(yintercept = 0, col = 4, size = 1)
grid.arrange(p1_w800, p2_w800, ncol = 2)
#plot residuals against previous residuals
p3_w800 <- ggplot(regression.points.w800, aes(x = c(regression.points.w800$residual[2:30],NA),y = residual))+
geom_point()+
labs(y = "Residuals", x = "Residuals lag 1", title = "Residual Independance")+
geom_hline(yintercept = 0, col = 4, size = 1)
grid.arrange(p1_w800, p3_w800,ncol = 2)
#Plot residuals against fitted values and Normal QQ plot
modelplot_w800 <- autoplot(model_l_w800, which = 1:2)
modelplot_w800
his1_w800 <- ggplot(regression.points.w800, aes(x = residual)) +
geom_histogram(colour = "black", fill="#004c6d", bins = 5) +
labs(x = "Residual", title = "Histogram of residuals")
his1_w800
#Shapiro-Wilk’s method for normality test
shapiro.test(regression.points.w800$residual) #p_value > 0.05 >we can assume normality
durbinWatsonTest(model_l_w800) #p_value<0.05 ->residuals are auto correlated
###model fitting for  1500 metres women
w1500_Date <- as.POSIXct(women1500$Date, format="%d / %m / %Y")
cor(as.numeric(w1500_Date),women1500$Time)
model_l_w1500 <- lm(Time ~ Date, data = women1500)
summary(model_l_w1500)
anova(model_l_w1500)
regression.points.w1500 <- get_regression_points(model_l_w1500)
#Plot of residuals vs explanatory variable
p1_w1500 <- ggplot(regression.points.w1500, aes(x = Date, y = residual)) +
geom_point() +
labs(x = "Date", y = "Residual", title = "Residuals vs Date") +
geom_hline(yintercept = 0, col = 4, size = 1)
p2_w1500 <- ggplot(regression.points.w1500, aes(x = Time_hat, y = residual)) +
geom_point() +
labs(x = "Fitted values", y = "Residual", title = "Residuals vs Fitted values") +
geom_hline(yintercept = 0, col = 4, size = 1)
grid.arrange(p1_w1500, p2_w1500, ncol = 2)
#plot residuals against previous residuals
p3_w1500 <- ggplot(regression.points.w1500, aes(x = c(regression.points.w1500$residual[2:14],NA),y = residual))+
geom_point()+
labs(y = "Residuals", x = "Residuals lag 1", title = "Residual Independance")+
geom_hline(yintercept = 0, col = 4, size = 1)
grid.arrange(p1_w1500, p3_w1500, ncol = 2)
#Plot residuals against fitted values and Normal QQ plot
modelplot_w1500 <- autoplot(model_l_w1500)
modelplot_w1500
his1_w1500 <- ggplot(regression.points.w1500, aes(x = residual)) +
geom_histogram(colour = "black", fill="#004c6d", bins = 6) +
labs(x = "Residual", title = "Histogram of residuals")
his1_w1500
#Shapiro-Wilk’s method for normality test
shapiro.test(regression.points.w1500$residual) #p_value > 0.05 >we can assume normality
durbinWatsonTest(model_l_w1500) #p_value<0.05 ->residuals are auto correlated
grid.arrange(modelplot_w400@plots[[1]], modelplot_w800@plots[[1]], modelplot_w1500@plots[[1]] )
##### Time transformed to speed variable ######
##Men##
##400 metres ##
men400_speed <- men400 %>%
mutate(speed = round(400/men400$Time,3))
men400_speed %>%
ggplot(aes(x = Date, y = speed))+
geom_point()+
labs(title = "Scatterplot of speed against Date")
model_speed_m400 <- lm(speed ~ Date, data = men400_speed)
summary(model_speed_m400)
anova(model_speed_m400)
autoplot(model_speed_m400)
shapiro.test(residuals.lm(model_speed_m400)) #p_value > 0.05 >we can assume normality
durbinWatsonTest(model_speed_m400) #p_value<0.05 ->residuals are auto correlated
###800 metres###
men800_speed <- men800 %>%
mutate(speed = round(800/men800$Time,3))
men800_speed %>%
ggplot(aes(x = Date, y = speed))+
geom_point()+
labs(title = "Scatterplot of speed against Date")
model_speed_m800 <- lm(speed ~ Date, data = men800_speed)
summary(model_speed_m800)
anova(model_speed_m800)
autoplot(model_speed_m800)
shapiro.test(residuals.lm(model_speed_m800))#p_value > 0.05 >we can assume normality
durbinWatsonTest(model_speed_m800) #p_value<0.05 ->residuals are auto correlated
###1500 metres###
men1500_speed <- men1500 %>%
mutate(speed = round(1500/men1500$Time,3))
men1500_speed %>%
ggplot(aes(x = Date, y = speed))+
geom_point()+
labs(title = "Scatterplot of speed against Date")
model_speed_m1500 <- lm(speed ~ Date, data = men1500_speed)
summary(model_speed_m1500)
anova(model_speed_m1500)
autoplot(model_speed_m1500)
shapiro.test(residuals.lm(model_speed_m1500))#p_value > 0.05 >we can assume normality
durbinWatsonTest(model_speed_m1500) #p_value<0.05 ->residuals are auto correlated
####### Women ########
###400 metres###
women400_speed <- women400 %>%
mutate(speed = round(400/women400$Time,3))
women400_speed %>%
ggplot(aes(x = Date, y = speed))+
geom_point()+
labs(title = "Scatterplot of speed against Date")
model_speed_w400 <- lm(speed ~ Date, data = women400_speed)
summary(model_speed_w400)
anova(model_speed_w400)
autoplot(model_speed_w400)
shapiro.test(residuals.lm(model_speed_w400))#p_value > 0.05 >we can assume normality
durbinWatsonTest(model_speed_w400) #p_value<0.05 ->residuals are auto correlated
#### 800 metres ###
women800_speed <- women800 %>%
mutate(speed = round(800/women800$Time,3))
women800_speed %>%
ggplot(aes(x = Date, y = speed))+
geom_point()+
labs(title = "Scatterplot of speed against Date")
model_speed_w800 <- lm(speed ~ Date, data = women800_speed)
summary(model_speed_w800)
anova(model_speed_w800)
autoplot(model_speed_w800)
shapiro.test(residuals.lm(model_speed_w800))#p_value > 0.05 >we can assume normality
durbinWatsonTest(model_speed_w800) #p_value<0.05 ->residuals are auto correlated
### 1500 metres ###
women1500_speed <- women1500 %>%
mutate(speed = round(1500/women1500$Time,3))
women1500_speed %>%
ggplot(aes(x = Date, y = speed))+
geom_point()+
labs(title = "Scatterplot of speed against Date")
model_speed_w1500 <- lm(speed ~ Date, data = women1500_speed)
summary(model_speed_w1500)
anova(model_speed_w1500)
autoplot(model_speed_w1500)
shapiro.test(residuals.lm(model_speed_w1500))#p_value > 0.05 >we can assume normality
durbinWatsonTest(model_speed_w1500) #p_value<0.05 ->residuals are auto correlated
#### log transformed Time as response ####
##men400metre##
men400 %>%
ggplot(aes(x = Date, y = log(Time)))+
geom_point()
model_log_m400 <- lm(log(Time) ~ Date, data = men400)
summary(model_log_m400)
anova(model_log_m400)
shapiro.test(residuals.lm(model_log_m400)) #p_value > 0.05 >we can assume normality
durbinWatsonTest(model_log_m400) #p_value<0.05 ->residuals are auto correlated
#Plot residuals against fitted values and Normal QQ plot
autoplot(model_log_m400, which = 1:2)
reg_table_log_m400 <- get_regression_table(model_log_m400, digits = 8)
reg_table_log_m400
#data frame with fitted values and residuals
loglm.m400<-data.frame(fit = model_log_m400$fitted.values,
res=model_log_m400$residuals,
time=men400$Time,
res1=c(model_log_m400$residuals[2:24],NA))
#Plot fitted values against Time
plotlog1_m400 <- ggplot(loglm.m400, aes(x=time,y=res)) +
geom_point() +
labs(x="Time", y="Residuals", title="Residuals vs Time")
#Plot residuals against the previous residuals (lag 1)
plotlog2_m400<-ggplot(loglm.m400, aes(x=res1,y=res)) +
geom_point() +
labs(y="Residuals", x="Residuals lag 1", title="Residual Independence")
#Create a grid with the two plots side-by-side
grid.arrange(plotlog1_m400, plotlog2_m400, ncol=2)
#Residual histogram
his2_m400 <- ggplot(loglm.m400, aes(x = res)) +
geom_histogram(colour = "black", fill="#004c6d", bins = 5) +
labs(x = "Residual", title = "Histogram of Residuals")
his2_m400
##percentage transformation applied to record time-men400
men400cent <- men400 %>%
mutate(percentage = round(Time/Time[1]*100,3))
#Model fitting
men400cent %>%
ggplot(aes(x = Date, y = percentage))+
geom_point()
model_cent_m400 <- lm(percentage ~ Date, data = men400cent)
summary(model_cent_m400)
anova(model_cent_m400)
shapiro.test(residuals.lm(model_cent_m400))#p_value > 0.05 >we can assume normality
durbinWatsonTest(model_log_m400) #p_value<0.05 ->residuals are auto correlated
reg_table_cent_m400 <- get_regression_table(model_cent_m400, digits = 8)
reg_table_cent_m400
#Plot residuals against fitted values and Normal QQ plot
autoplot(model_cent_m400, which = 1:2)
#data frame with fitted values and residuals
centlm.m400<-data.frame(fit = model_cent_m400$fitted.values,
res=model_cent_m400$residuals,
time=men400cent$Time,
res1=c(model_cent_m400$residuals[2:24],NA))
#Plot fitted values against Time
plotcent1_m400 <- ggplot(centlm.m400, aes(x=time,y=res)) +
geom_point() +
labs(x="Time", y="Residuals", title="Residuals vs Time")
#Plot residuals against the previous residuals (lag 1)
plotcent2_m400<-ggplot(centlm.m400, aes(x=res1,y=res)) +
geom_point() +
labs(y="Residuals", x="Residuals lag 1", title="Residual Independence")
#Create a grid with the two plots side-by-side
grid.arrange(plotcent1_m400, plotcent2_m400, ncol=2)
#Residual histogram
his3_m400 <- ggplot(centlm.m400, aes(x = res)) +
geom_histogram(colour = "black", fill="#004c6d", bins = 5) +
labs(x = "Residual", title = "Histogram of Residuals")
his3_m400
###### Fitting a gam Men400 ####
TimeZero <- as.Date(c("01/01/1900"), format = "%d / %m / %Y")
men400$Elapsed <- as.numeric((men400$Date - TimeZero)/365.25)
#gam using gcv
##without using gamma parameter##
gam0_m400 <- gam(Time ~ s(Elapsed, bs="cr", k = 17), data=men400, family = Gamma(link = log))
summary(gam0_m400)
par(mfrow=c(1,2))
plot(gam0_m400, residuals=TRUE, cex=3)
install.packages("here")
library(here)
# Use here() to construct the path
data <- read.csv(here("Men400m.csv"), sep = ",", na.strings = ",")
head(data)
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
print(here("Men400m.csv"))
print(here("Men400m.csv"))
print(here("Men400m.csv"))
men400 <- read.csv(here("Men400m.csv"), sep=",", na.strings=",") %>%
dplyr::select(-Index, -Wind)
men400 <- read.csv(here("Men400m.csv"),sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
men800 <- read.csv(here("Men800m.csv"),sep=",",na.strings=",") %>%
dplyr::select(-Index,-Wind)
men1500 <- read.csv(here("Men1500m.csv"),sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
women400 <- read.csv(here("Women400m.csv"),sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
women800 <- read.csv(here("Women800m.csv"),sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
women1500 <- read.csv(here("Women1500m.csv"),sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
summary_time_m400 <- men400 %>%
summarize(mean = mean(Time), std_dev = sd(Time), Interquartile_range = IQR(Time))
summary_time_m400 %>%
dplyr::select(mean,std_dev, Interquartile_range) %>%
kable(caption = '\\label{tab:reg}Summary of record time for 400 metres sprint for men.') %>%
kable_styling(latex_options = 'HOLD_position')
summary_time_m800 <- men800 %>%
summarize(mean = mean(Time), std_dev = sd(Time), Interquartile_range = IQR(Time))
summary_time_m800%>%
dplyr::select(mean,std_dev, Interquartile_range) %>%
kable(caption = '\\label{tab:reg}Summary of record time for 800 metres sprint for men.') %>%
kable_styling(latex_options = 'HOLD_position')
summary_time_m1500 <- men1500 %>%
summarize(mean = mean(Time), std_dev = sd(Time), Interquartile_range = IQR(Time))
summary_time_m1500%>%
dplyr::select(mean,std_dev, Interquartile_range) %>%
kable(caption = '\\label{tab:reg}Summary of record time for 1500 metres sprint for men.') %>%
kable_styling(latex_options = 'HOLD_position')
#########MEN########
#men400 data cleaning
men400$Date <- as.Date(men400$Date, format = "%d / %m / %Y")
men400$DOB <- as.Date(men400$DOB, format = "%d / %m / %Y")
#men800 data cleaning
men800$Date <- as.Date(men800$Date, format = "%d / %m / %Y")
men800$DOB <- as.Date(men800$DOB, format = "%d / %m / %Y")
#men1500 data cleaning
men1500$Date <- as.Date(men1500$Date, format = "%d / %m / %Y")
men1500$DOB <- as.Date(men1500$DOB, format = "%d / %m / %Y")
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
library(here)
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
library(here)
library(tidyverse)
library(moderndive)
library(gapminder)
library(sjPlot)
library(stats)
library(jtools)
library(dplyr)
library(zoo)
library(kableExtra)
library(scales)
library(gridExtra)
library(janitor)
library(tinytex)
library(hrbrthemes)
library(viridis)
library(scales)
library(ggrepel)
library(lubridate)
library(ggfortify)
library(gtsummary)
library(car)
library(mgcv)
library(MASS)
library(mgcViz)
library(gratia)
men400 <- read.csv(here("Men400m.csv"),sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
men800 <- read.csv(here("Men800m.csv"),sep=",",na.strings=",") %>%
dplyr::select(-Index,-Wind)
men1500 <- read.csv(here("Men1500m.csv"),sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
women400 <- read.csv(here("Women400m.csv"),sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
women800 <- read.csv(here("Women800m.csv"),sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
women1500 <- read.csv(here("Women1500m.csv"),sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
getwd()
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
setwd("E:/MSc Data Analytics/R Project")
getwd()
getwd()
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
setwd("E:/MSc Data Analytics/R Project")
getwd()
getwd()
men400 <- read.csv("Men400m.csv",sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
setwd("E:/MSc Data Analytics/R Project")
library(tidyverse)
library(moderndive)
library(gapminder)
library(sjPlot)
library(stats)
library(jtools)
library(dplyr)
library(zoo)
library(kableExtra)
library(scales)
library(gridExtra)
library(janitor)
library(tinytex)
library(hrbrthemes)
library(viridis)
library(scales)
library(ggrepel)
library(lubridate)
library(ggfortify)
library(gtsummary)
library(car)
library(mgcv)
library(MASS)
library(mgcViz)
library(gratia)
men400 <- read.csv("Men400m.csv",sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
getwd()
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
###### Fitting a gam Men400 ####
TimeZero <- as.Date(c("01/01/1900"), format = "%d / %m / %Y")
men400$Elapsed <- as.numeric((men400$Date - TimeZero)/365.25)
men400 <- read.csv("Men400m.csv",sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
library(tidyverse)
library(moderndive)
library(gapminder)
library(sjPlot)
library(stats)
library(jtools)
library(dplyr)
library(zoo)
library(kableExtra)
library(scales)
library(gridExtra)
library(janitor)
library(tinytex)
library(hrbrthemes)
library(viridis)
library(scales)
library(ggrepel)
library(lubridate)
library(ggfortify)
library(gtsummary)
library(car)
library(mgcv)
library(MASS)
library(mgcViz)
library(gratia)
men400 <- read.csv("Men400m.csv",sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
men800 <- read.csv("Men800m.csv",sep=",",na.strings=",") %>%
dplyr::select(-Index,-Wind)
men1500 <- read.csv("Men1500m.csv",sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
women400 <- read.csv("Women400m.csv",sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
women800 <- read.csv("Women800m.csv",sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
women1500 <- read.csv("Women1500m.csv",sep=",",na.strings=",")%>%
dplyr::select(-Index,-Wind)
###### Fitting a gam Men400 ####
TimeZero <- as.Date(c("01/01/1900"), format = "%d / %m / %Y")
men400$Elapsed <- as.numeric((men400$Date - TimeZero)/365.25)
###### Fitting a gam Men400 ####
TimeZero <- as.Date(c("01/01/1900"), format = "%d / %m / %Y")
men400$Elapsed <- as.numeric((men400$Date - TimeZero)/365.25)
